/*
void puts(const char* A0) {
	if(A0 == NULL) {
		return;
	}
	
	char R3;
	u16 R4;
	u16 R5 = 0x7f;
	do {
		R3 = *A0++;
		R4 = R3 & R5;
		WRB(R4);
	} while(R3 > R4);
}
*/
.scope
.export @puts
@puts: //LEAF
	MOV     A0, A0                 // NULL check (more lightweight than CMP)
	RET.EQ                         // Return if NULL
	
	MOV     R5, 0x7f               // Create mask for the ASCII character bits
	
@.next_char:
	LDB     R3, [A0]               // Load character from string
	INC     A0                     // Increment string pointer
	AND     R4, R3, R5             // Mask off the continuation bit
	WRB     R4                     // Write ASCII character
	CMP     R3, R4                 // Check for continuation bit
	BRR.GT  @.next_char            // Continuation bit was set, keep iterating through the string
	
	RET

/*
bool get_flag_byte(char* out_byte);

void main(void) {
	char c;            // R8
	bool diff = false; // R7
	
	while(get_flag_byte(&c)) {
		diff |= getchar() - c;
	}
	
	if(diff) {
		printf("Loser!\n");
	}
	else {
		printf("Winner!\n");
	}
}
*/
.scope
.export @main
@main:
	MOV     R7, ZERO
	
@.get_flag_byte:
	RDBY    R8, (0xF)
	BRR.CS  @.after_loop
	
	RDBY    R1
	BRR.CS  @.loser
	
	SUB     R1, R8
	ORR     R7, R1
	BRR     @.get_flag_byte
	
@.after_loop:
	MOVY    R7, R7
	BRR.ZR  @.winner
	
@.loser:
	ADR     A0, @.lose_text
	BRR     @.print
	
@.winner:
	ADR     A0, @.win_text
	
@.print:
	FCR     @puts
	HLT

@.lose_text:
	.lestring "Loser!\n"

@.win_text:
	.lestring "Winner!\n"
