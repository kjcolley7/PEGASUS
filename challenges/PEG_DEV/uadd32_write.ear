/*
u32 uadd32(u32 x, u32 y) {
	u16 a = LO16(x); //R2
	u16 b = HI16(x); //R3
	u16 c = LO16(y); //R4
	u16 d = HI16(y); //R5
	
	u16 e; //R2
	u16 f; //R3
	
	e = a + c;
	f = b + d + CARRY;
	
	return __PAIR__(LO16=e, HI16=f);
}
*/
.scope
.export @uadd32
@uadd32: //LEAF
	ADD     R2, R4
	ADC     R3, R5
	RET


/*
void print_hex16(u16 num, void (*do_wrb)(char c)) {
	u16 shift = 12;
	while(1) {
		u8 nyb = num >> shift;
		do_wrb("0123456789ABCDEF"[nyb]);
		if(shift == 0) {
			break;
		}
		
		shift -= 4;
	}
}
*/
.scope
.export @print_hex16
@print_hex16:
	PSH     {R8-R10, RA, RD}
	MOV     R8, R2
	MOV     R9, R3
	MOV     R10, 12
	
@.do_body:
	SRU     R2, R8, R10
	AND     R2, 0xF
	ADR     R3, @.hexchars
	ADD     R3, R2
	LDB     R2, [R3]
	FCA     R9
	
	MOV     R10, R10
	SUBN.NZ R10, 4
	BRR.NZ  @.do_body
	
@.return:
	POP     {R8-R10, PC, DPC}

@.hexchars:
	.db "0123456789ABCDEF"


/*
void print_hex32(u32 num) {
	if(HI16(num)) {
		print_hex16(HI16(num)); //R3
	}
	print_hex16(LO16(num)); //R2
}
*/
.scope
.export @print_hex32
@print_hex32:
	PSH     {R8-R9, RA, RD}
	
	MOV     R8, R2
	MOV     R9, R4
	
	MOV     R2, R3
	MOV     R3, R9
	FCR     @print_hex16
	
	MOV     R2, R8
	MOV     R3, R9
	FCR     @print_hex16
	
	POP     {R8-R9, PC, DPC}


.scope
.export @wrb_1
@wrb_1: //LEAF
	WRB     (1), R2
	RET

/*
void puts(const char* R2) {
	if(R2 == NULL) {
		return;
	}
	
	char R3;
	u16 R4;
	u16 R5 = 0x7f;
	do {
		R3 = *R2++;
		R4 = R3 & R5;
		WRB(R4);
	} while(R3 > R4);
}
*/
.scope
.export @puts
@puts: //LEAF
	MOV     R2, R2                // NULL check (more lightweight than CMP)
	RET.EQ                        // Return if NULL
	
	MOV     R5, 0x7f              // Create mask for the ASCII character bits
	
@.next_char:
	LDB     R3, [R2]              // Load character from string
	INC     R2                    // Increment string pointer
	AND     R4, R3, R5            // Mask off the continuation bit
	WRB     R4                    // Write ASCII character
	CMP     R3, R4                // Check for continuation bit
	BRR.GT  @.next_char           // Continuation bit was set, keep iterating through the string
	
	RET


/*
void uadd32_write(u32 a, u32 b) {
	u32 sum = uadd32(a, b);
	printf("0x%08X\n", sum);
}
*/
.scope
.export @uadd32_write
@uadd32_write:
	PSH     {RA, RD}
	
	WRB     (1), '0'
	WRB     (1), 'x'
	FCR     @uadd32
	
	ADR     R4, @wrb_1
	FCR     @print_hex32
	
	WRB     (1), '\n'
	
	// ADR     R2, @.str
	// FCR     @puts
	
	POP     {PC, DPC}
	
// @.str:
// 	.lestring "ret\n"

.scope
.export @win
@win:
	PSH     {R8, RA, RD}
	
	// call puts(flag_prefix)
	MOV     R8, R2
	ADR     R2, @.flag_prefix
	FCA     @puts
	
	// tail-call puts(flag)
	MOV     R2, R8
	POP     {R8, RA, RD}
	BRA     @puts
	
@.flag_prefix:
	.lestring "FLAG:"

.scope
.export @test
@test:
	MOV     R2, 0x5678
	MOV     R3, 0x1234
	MOV     R4, 0x1010
	MOV     R5, 0x1010
	FCR     @uadd32_write
	
	MOV     R2, 0x5678
	MOV     R3, 0x0034
	MOV     R4, 0x1010
	MOV     R5, 0x0010
	FCR     @uadd32_write
	
	MOV     R2, 0x1111
	MOV     R3, 0x1111
	MOV     R4, 0xEEEF
	MOV     R5, 0xEEEE
	FCR     @uadd32_write
	
	HLT
