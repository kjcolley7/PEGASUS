/*
void puts(const char* R2) {
	if(R2 == NULL) {
		return;
	}
	
	char R3;
	u16 R4;
	u16 R5 = 0x7f;
	do {
		R3 = *R2++;
		R4 = R3 & R5;
		WRB(R4);
	} while(R3 > R4);
}
*/
.scope
.export @puts
@puts: //LEAF
	MOV     R2, R2                 // NULL check (more lightweight than CMP)
	RET.EQ                        // Return if NULL
	
	MOV     R5, 0x7f               // Create mask for the ASCII character bits
	
@.next_char:
	LDB     R3, [R2]               // Load character from string
	INC     R2                     // Increment string pointer
	AND     R4, R3, R5             // Mask off the continuation bit
	WRB     R4                     // Write ASCII character
	CMP     R3, R4                 // Check for continuation bit
	BRR.GT  @.next_char            // Continuation bit was set, keep iterating through the string
	
	RET

/*
void main(void) {
	puts(flag);
}
*/
.scope
@.flag:
	.lestring "sun{1n_4_w0rld_0f_pur3_d3lir1ati0n}\n"

.export @main
@main:
	ADR     R2, @.flag
	FCR     @puts
	HLT
