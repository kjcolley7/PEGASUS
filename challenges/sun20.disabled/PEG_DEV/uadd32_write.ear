/*
u32 uadd32(u32 x, u32 y) {
	u16 a = LO16(x); //A0/R1
	u16 b = HI16(x); //A1/R2/RV -> R5
	u16 c = LO16(y); //A2/R3/RVX
	u16 d = HI16(y); //A3/R4
	
	u16 e; //RV
	u16 f; //RVX
	
	e = a + c;
	f = b + d + CARRY;
	
	return __PAIR__(LO16=e, HI16=f);
}
*/
.scope
.export @uadd32
@uadd32: //LEAF
	MOV     R5, A1
	ADD     RV, A0, A2
	ADC     RVX, R5, A3
	RET


/*
void print_hex16(
	u16 num,                   // A0 -> S0
	void (*do_wrb)(char c)     // A1 -> S1
) {
	u16 shift = 12;            // S2
	while(1) {
		u8 nyb = num >> shift; // R1
		nyb &= 0xf;
		do_wrb("0123456789ABCDEF"[nyb]);
		if(shift == 0) {
			break;
		}
		
		shift -= 4;
	}
}
*/
.scope
.export @print_hex16
@print_hex16:
	PSH     {S0-S2, RA, RD}
	MOV     S0, A0
	MOV     S1, A1
	MOV     S2, 12
	
@.do_body:
	SRU     R1, S0, S2
	AND     R1, 0xF
	ADR     R2, @.hexchars
	ADD     R2, R1
	LDB     A0, [R2]
	FCA     S1
	
	MOV     S2, S2
	SUBN.NZ S2, 4
	BRR.NZ  @.do_body
	
@.return:
	POP     {S0-S2, PC, DPC}

@.hexchars:
	.db "0123456789ABCDEF"


/*
void print_hex32(
	u32 num,                   // A0:A1
	void (*do_wrb)(char c)     // A2 -> S1
) {
	u16 lo = LO16(num);        // A0 -> S0
	print_hex16(HI16(num));    // A1
	print_hex16(lo);
}
*/
.scope
.export @print_hex32
@print_hex32:
	PSH     {S0-S1, RA, RD}
	
	MOV     S0, A0
	MOV     S1, A2
	
	MOV     A0, A1
	MOV     A1, S1
	FCR     @print_hex16
	
	MOV     A0, S0
	MOV     A1, S1
	FCR     @print_hex16
	
	POP     {S0-S1, PC, DPC}


.scope
.export @wrb_1
@wrb_1: //LEAF
	WRB     (1), A0
	RET

/*
void puts(
	const char* s //A0
) {
	if(s == NULL) {
		return;
	}
	
	char byte;         //R2
	u16 c;             //R3
	u16 ascii = 0x7f;  //R4
	do {
		byte = *s++;
		c = byte & ascii;
		WRB(c);
	} while(byte != c);
}
*/
.scope
.export @puts
@puts: //LEAF
	MOV     A0, A0                 // NULL check (more lightweight than CMP)
	RET.EQ                         // Return if NULL
	
	MOV     R4, 0x7f               // Create mask for the ASCII character bits
	
@.next_char:
	LDB     R2, [A0]               // Load character from string
	INC     A0                     // Increment string pointer
	AND     R3, R2, R4             // Mask off the continuation bit
	WRB     R3                     // Write ASCII character
	CMP     R2, R3                 // Check for continuation bit
	BRR.NE  @.next_char            // Continuation bit was set, keep iterating through the string
	
	RET


/*
void uadd32_write(u32 a, u32 b) {
	u32 sum = uadd32(a, b);
	printf("0x%08X\n", sum);
}
*/
.scope
.export @uadd32_write
@uadd32_write:
	PSH     {RA, RD}
	
	FCR     @uadd32
	
	WRB     (1), '0'
	WRB     (1), 'x'
	
	MOV     A0, RV
	MOV     A1, RVX
	ADR     A2, @wrb_1
	FCR     @print_hex32
	
	WRB     (1), '\n'
	
	POP     {PC, DPC}

.scope
.export @win
@win:
	PSH     {S0, RA, RD}
	
	// call puts(flag_prefix)
	MOV     S0, A0
	ADR     A0, @.flag_prefix
	FCR     @puts
	
	// tail-call puts(flag)
	MOV     A0, S0
	POP     {S0, RA, RD}
	BRR     @puts
	
@.flag_prefix:
	.lestring "FLAG:"

.scope
.export @test
@test:
	MOV     A0, 0x5678
	MOV     A1, 0x1234
	MOV     A2, 0x1010
	MOV     A3, 0x1010
	FCR     @uadd32_write
	
	MOV     A0, 0x5678
	MOV     A1, 0x0034
	MOV     A2, 0x1010
	MOV     A3, 0x0010
	FCR     @uadd32_write
	
	MOV     A0, 0x1111
	MOV     A1, 0x1111
	MOV     A2, 0xEEEF
	MOV     A3, 0xEEEE
	FCR     @uadd32_write
	
	HLT
