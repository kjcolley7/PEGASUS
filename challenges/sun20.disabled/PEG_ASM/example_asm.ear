/*
void puts(
	const char* s //A0
) {
	if(s == NULL) {
		return;
	}
	
	char byte;         //R2
	u16 c;             //R3
	u16 ascii = 0x7f;  //R4
	do {
		byte = *s++;
		c = byte & ascii;
		WRB(c);
	} while(byte != c);
}
*/
.scope
.export @puts
@puts: //LEAF
	MOV     A0, A0                 // NULL check (more lightweight than CMP)
	RET.EQ                         // Return if NULL
	
	MOV     R4, 0x7f               // Create mask for the ASCII character bits
	
@.next_char:
	LDB     R2, [A0]               // Load character from string
	INC     A0                     // Increment string pointer
	AND     R3, R2, R4             // Mask off the continuation bit
	WRB     R3                     // Write ASCII character
	CMP     R2, R3                 // Check for continuation bit
	BRR.NE  @.next_char            // Continuation bit was set, keep iterating through the string
	
	RET


.scope
.export @decrypt_flag
@decrypt_flag: //LEAF
	ADR     R2, @encrypted_flag
	ADR     R3, @decryption_key
	
	MOV     R4, R3
	
@.decrypt_loop:
	LDB     R5, [R2]
	LDB     R6, [R3]
	INC     R3
	XOR     R5, R6
	STB     [R2], R5
	INC     R2
	
	CMP     R2, R4
	BRR.LT  @.decrypt_loop
	
	RET

.scope
.export @main
@main:
	FCR     @decrypt_flag
	ADR     A0, @encrypted_flag
	FCR     @puts
	HLT

.segment @DATA
@encrypted_flag:
	.db "\x98\x90\x97\x99\x82\xd1\x80\xd7\xff\x89\xd1\x90\xdd\xb6\xd9\xd7\xff\x9b\xc0\x94\x82\xaa\x97\x94\x95\xce\x91\x2b"

@decryption_key:
	.db "\x6b\x65\x79\x62\x6f\x61\x72\x64\x20\x6d\x61\x73\x68\x69\x6e\x67\x20\x69\x73\x20\x66\x75\x6e\x20\x6c\x6f\x6c\x21"
