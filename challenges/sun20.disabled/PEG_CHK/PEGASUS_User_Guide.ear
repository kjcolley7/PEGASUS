/*
void puts(
	const char* s //A0
) {
	if(s == NULL) {
		return;
	}
	
	char byte;         //R2
	u16 c;             //R3
	u16 ascii = 0x7f;  //R4
	do {
		byte = *s++;
		c = byte & ascii;
		WRB(c);
	} while(byte != c);
}
*/
.scope
.export @puts
@puts: //LEAF
	MOV     A0, A0                 // NULL check (more lightweight than CMP)
	RET.EQ                         // Return if NULL
	
	MOV     R4, 0x7f               // Create mask for the ASCII character bits
	
@.next_char:
	LDB     R2, [A0]               // Load character from string
	INC     A0                     // Increment string pointer
	AND     R3, R2, R4             // Mask off the continuation bit
	WRB     R3                     // Write ASCII character
	CMP     R2, R3                 // Check for continuation bit
	BRR.NE  @.next_char            // Continuation bit was set, keep iterating through the string
	
	RET

/*
void main(void) {
	puts(flag);
}
*/
.scope
@.flag:
	.lestring "sun{1n_4_w0rld_0f_pur3_d3lir1ati0n}\n"

.export @main
@main:
	ADR     A0, @.flag
	FCR     @puts
	HLT
